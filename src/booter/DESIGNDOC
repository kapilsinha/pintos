            +-----------------------+
            |         CS 124        |
            | PROJECT 2: BOOTLOADER |
            |    DESIGN DOCUMENT    |
            +-----------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Kapil Sinha <ksinha@caltech.edu>
Karthik Nair <knair@caltech.edu>
Joseph Tilahun <jtilahun@caltech.edu>

>> Specify how many late tokens you are using on this assignment:
   0

>> What is the Git repository and commit hash for your submission?
   (You only need to include the commit-hash in the file you submit
   on Moodle.)

   Repository URL: https://github.com/kapilsinha/pintos/
   commit:

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

                 PC BOOTER
                 =========

---- LOGISTICS ----

These questions will help us to keep track of the difficulty level of
assignments, as well as keeping track of which team members worked on
which parts.

>> L1: How many hours did each team member spend on this assignment?
   Make sure that each member's total time is listed.
   Kapil    20 h
   Karthik  20 h
   Joseph   15 h

>> L2: What did each team member focus on for this assignment?  Keep
   descriptions to 25-30 words or less.
   Kapil focused on implementing the bootloader. He programmed the assembly
   code that runs at boot time to load the game into memory. Karthik focused
   on setting up the interrupts. He implemented the setting up of the
   interrupts descriptor table as well as the timer and keyboard interrupts.
   Joseph focused on setting up the video interface and implementing the game
   itself. He implemented the interface to video memory, the structs that are
   used to represent the game internally, and the basic game logic that is
   used to make the game operate cleanly.

Note that this design document is a bit long.  Most of the questions can be
answered pretty briefly.  Don't feel a need to write a long answer if it is
not required by the question.

                 GAME / DEMO
                 ===========

---- ALGORITHMS ----

>> A1: In a few sentences, describe what kind of game or demo program your
>> PC booter implements.
   Our PC booter implements the game Pong. Pong is one of the earliest arcade
   video games, originally manufactured by Atari in 1972. Pong is a two-player
   table tennis sports game featuring simple two-dimensional graphics.

>> A2: In a few sentences, how does the user interact with the program?
>> What are the controls?  What should the user try to do?
   Each player moves his or her paddle using the appropriate keyboard keys.
   Player 1, whose paddle is on the left-hand side of the screen, moves his or
   her paddle up by pressing and holding the A key and moves it down by
   pressing and holding the Z key. Player 2, whose paddle is on the right-hand
   side of the screen, moves his or her paddle up by pressing and holding the
   K key and moves it down by pressing and holding the M key. Each player
   should hit the ball to the other player's side by using his or her paddle.
   During gameplay, the ball is hit in this way repeatedly back and forth.
   A player earns a point when the other player fails to return the ball to
   him or her. The goal of the game is to reach three points first.


---- DATA STRUCTURES ----

>> A3: Describe any global state that your program manages in order to
>> perform its operations.  Don't focus on state managed within interrupt
>> handlers; we will look at that later.  Rather, focus on state that is
>> part of the game implementation itself.
   The game itself is stored in a global variable named 'game', which is of
   type Game. Game contains the information associated with the current state
   of the game, including the information associated with the current state of
   each player, the information associated with the current state of the ball,
   and indicators as to whether the round is over and whether the game is over.


---- SYNCHRONIZATION ----

>> A4: From the perspective of the entire program, briefly describe how
>> the various interrupts are handled and processed within your program.
>> For example, when a timer interrupt occurs, what is the general sequence
>> of operations or updates that is performed within your program?
>> Similarly, when a keyboard interrupt occurs, what does your program do
>> in response?
   When a timer interrupt occurs, the execution of the program is halted, and
   a jump to the assembly function 'irq0_handler' is made. The function calls
   the C function 'timer_handler', which does timer interrupt handling at the
   program level. The function simply increments the static 'time_ticks'
   variable that keeps time for the program. When a keyboard
   interrupt occurs, the execution of the program is halted, and a
   jump to the assembly function 'irq1_handler' is made. The function calls
   the C function 'keyboard_handler', which does keyboard interrupt handling
   at the program level. The function simply updates the boolean static
   variable that corresponds to the key that caused the interrupt so that
   the variables accurately indicate whether the key is currently depressed.

>> A5: Would you say your program relies on polling or busy-waiting anywhere
>> to accomplish its tasks?  If so, what tasks?
   Yes, our program relies on busy-waiting to accomplish its tasks. The
   timer uses busy-waiting for performing sleeping in the sleeping function.


---- RATIONALE ----

>> A6: Why did you choose the project you did?
   We chose the project we did because Pong is a classic arcade game that
   generations of arcade enthusiasts have played. Furthermore, Pong is a game
   that is simple for players of all ages to pick up, yet interesting enough
   to not be boring.

>> A7: Did your choice of project affect any of the specific implementation
>> details of the various subsystems that you needed to use?  (For example,
>> if you implemented a scrolling game, did you implement specialized high-
>> performance video code to scroll the screen?)
   Choosing Pong for our project meant that our game only needs to respond to
   four keys on the keyboard: the A, Z, M, and K keys. For this reason, our
   game uses static boolean variables to keep track of what keys are currently
   depressed rather than a circular queue.

>> A8: Did you run into any technical or resource limitations in the
>> implementation of your program?  (For example, bootloader didn't fit,
>> or a really useful standard library wasn't available, or you couldn't
>> achieve the desired performance level, etc.)  If so, what steps did you
>> take to try to overcome those limitations?
   We did not run into any technical or resource limitations in the
   implementation of our program.

                 BOOT SECTOR
                 ===========

---- DATA STRUCTURES ----

>> B1: How did you decide to store the Disk Address Packet?  Does the
>> memory occupied by the DAP get reclaimed after it is used?  If not,
>> why not?
   We decided to store the DAP on the stack. The memory occupied by the DAP
   gets reclaimed after it is used.

>> B2: How many sectors does your bootloader load?  How did you arrive
>> at this number?  Briefly explain your rationale.
   Our bootloader loads 20 sectors. We arrived at this number because it is
   the minimum number of sectors that are needed to contain the program.bin
   file.

>> B3: Does your bootloader pass any information to the main program?
>> (If not, just say no.)  If so, what information is passed, and how
>> is it passed?
   No, our bootloader does not pass any information to the main program.

---- ALGORITHMS ----

>> B3: Briefly describe how your bootloader brings your program into
>> memory.  Does it perform one large load, or multiple smaller loads?

>> B4: Did you add any BIOS calls to your bootloader to prepare for your
>> main program?  (i.e. things that aren't available in protected mode)

              VIDEO SUBSYSTEM
              ===============

---- DATA STRUCTURES ----

>> C1: What video display mode does your program use?  Is it a text mode
>> or a graphical mode?  Where does the video buffer start?  How is data
>> represented in this mode?  (Please be brief; we don't need complete
>> documentation on the video system.)
   Our program uses a text video display mode. The video buffer starts at
   address 0xB8000. In this mode, each position on the display is represented
   as 16 continguous bits (2 bytes) in memory. The lower byte represents the
   character value, and the upper byte represents the color of the character:
   the high nibble represents the background color, and the low nibble
   represents the foreground color.

>> C2: Does your video code maintain any variables or data structures to
>> facilitate video output?  Briefly describe these values and their
>> purposes here.
   Our video code maintains the colors, the video buffer, and the current
   cursor position as global variables. In particular, the current foreground
   and background colors are represented in variables with the type
   `static char'. As well, the current position that is to be written to in
   the video buffer is represented in a variable with the type `uint16_t *'.
   Also, the current position that is to be written to on the screen (the
   cursor position) is represented in a variable with the type `Position'.

---- ALGORITHMS ----

>> C3: What abstraction does your video code present to your main program?
>> Briefly describe the higher-level operations you decided to implement.
   Our video code provides abstractions to print characters to the screen and
   clear the screen. Printing strings to the screen involves writing to
   video memory incrementally, character by character. Clearing the screen
   involves zeroing out the entire region of video memory, which has the
   effect of making the screen completely blank.

---- RATIONALE ----

>> C4: Did you take any specific steps to improve the appearance of your
>> program's display output?  For example, using Extended ASCII Codes, or
>> choosing specific colors to represent different things?
   No, we did not take any specific steps to improve the appearance of our
   program's display output.

              TIMER SUBSYSTEM
              ===============

---- DATA STRUCTURES ----

>> D1: What state does your timer subsystem manage?  Describe the variables
>> or data structures that it maintains, and how they are used.
The timer subsystem uses an integer to keep track of the number of processor
ticks that have passed. When the sleep() function is called, the function
goes into a while loop until this integer has been incremented by the desired
amount and then returns.

---- ALGORITHMS ----

>> D2: What abstraction does your timer code present to your main program?
>> Briefly describe the higher-level operations you decided to implement.
The timer code provides a simple sleep function which allows the program to
sleep for a certain amount of time to make the game run at a realistic speed.

>> D3: Did you change the timer frequency from 100Hz?  If so, what did you
>> change it to, and why?
No, we did not change the timer frequency from 100Hz because this seemed to
work the best for our game.

---- SYNCHRONIZATION ----

>> D4: Given how your program handles timer events, is there any potential
>> for timer interrupts to generate race conditions in updating your
>> program's global state?  If so, what steps did you take to ensure that
>> such situations cannot occur?
No, our program for timer events should not generate race conditions because
the sleep() function keeps executing until it is done and only then will the
next sleep() function be called.

            KEYBOARD SUBSYSTEM
            ==================

---- DATA STRUCTURES ----

>> E1: What state does your keyboard subsystem manage?  Describe the variables
>> or data structures that it maintains, and how they are used.
Since we would need flags for determining whether or not a particular key was
pressed anyway, we decided not to use a queue and simply have the keyboard
subsystem manage a set of boolean variables with one for each key that we
needed for the game. Each time a scan code for pressing the key is read,
its boolean variable is set to 1. When a scan code for releasing the key is
read, the boolean variable is set to 0.

>> E2: How do your data structures handle keys with multi-byte scan-codes?
We did not use any keys that generate multi-byte scan-codes and did not have
to handle this case.

---- ALGORITHMS ----

>> E3: What abstraction does your keyboard code present to your main program?
>> Briefly describe the higher-level operations you decided to implement.
The keyboard code provides multiple is_<key>_pressed() functions to check if
<key> is pressed or not.

>> E4: Does your keyboard subsystem expose scan-codes directly to your main
>> program, or does it preprocess them and expose other information to your
>> main program?  If scan-code data is preprocessed, briefly describe what
>> information is actually exposed, and how it is derived from scan-codes.
No, the keyboard subsystem does not expose scan-codes directly to our main
program. It preprocesses the scan codes and then sets the appropriate boolean
variable for that key to 0 or 1 as per the code read. The main program then
uses a function to get the value of this boolean variable. 

---- SYNCHRONIZATION ----

>> E5: Given how your keyboard interrupt handler operates, is there any
>> potential for race conditions in updating the keyboard subsystem's
>> internal state?  If so, what steps did you take to ensure that such
>> situations cannot occur?

>> E6: Given how your program handles keyboard events, is there any
>> potential for keyboard interrupts to generate race conditions in updating
>> your program's global state?  If so, what steps did you take to ensure
>> that such situations cannot occur?

---- RATIONALE ----

>> E7: Why did you choose the design and data representation that your
>> keyboard subsystem uses?  How is it suited to your program's overall
>> operation?

              SURVEY QUESTIONS
              ================

Answering these questions is optional, but it will help us improve the
course in future years.  Feel free to tell us anything you want - these
questions are just to spur your thoughts.  Also, feel free to be completely
honest if there are issues with the assignment or the course - you won't be
penalized.  We can't fix things until we know about them.  :-)

>> In your opinion, was this assignment, or any of the parts of it, too
>> easy or too hard?  Did it take too long or too little time?
   This assignment was of a reasonable difficulty. The amount of time it
   took to complete was about right.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?
   Yes, we found that working on the bootloader gave us greater insight into
   bootstrapping, a part of OS design. Implement ng the bootloader improved
   our understanding of how an OS is loaded in memory when a computer is
   powered on.

>> Were there any parts of the assignment that you felt were unnecessarily
>> tedious or pointless?
   No, there were no parts of the assignment that we felt were unnecessarily
   tedious or pointless.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?
   Knowing what values to put into the DAP table from the outset would have
   be helpful to students in future quarters.

>> Do you have any suggestions for the instructor and/or TAs to more
>> effectively assist students, either for future quarters or the remaining
>> projects?
   No.

>> Any other comments?
   No.
