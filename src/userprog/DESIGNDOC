                     +--------------------------+
                     |          CS 124          |
                     | PROJECT 4: USER PROGRAMS |
                     |     DESIGN DOCUMENT      |
                     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Kapil Sinha <ksinha@caltech.edu>
Karthik Nair <knair@caltech.edu>

>> Specify how many late tokens you are using on this assignment:

>> What is the Git repository and commit hash for your submission?
   (You only need to include the commit-hash in the file you submit
   on Moodle.)

   Repository URL: https://github.com/kapilsinha/pintos
   commit ...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

			   USER PROGRAMS
			   =============

---- LOGISTICS ----

These questions will help us to keep track of the difficulty level of
assignments, as well as keeping track of which team members worked on
which parts.

>> L1: How many hours did each team member spend on this assignment?
   Make sure that each member's total time is listed.
   Karthik Nair: 60 h
   Kapil Sinha: 60 h

>> L2: What did each team member focus on for this assignment?  Keep
   descriptions to 25-30 words or less.
   Karthik focused on implementing the execution system calls and file system
   calls.
   Kapil focused on implementing argument passing and setting up the stack.
   Both Karthik and Kapil worked on implementing waiting for a process because
   there were quite a few bugs that needed to be ironed out.

                           ARGUMENT PASSING
                           ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct child_process {
    struct thread *child;              /* Pointer to the child thread to get name and other values. */
    struct semaphore signal;           /* Semaphore to signal when child is done executing. */
    int exit_status;                   /* Exit status of the child. */
    struct semaphore load_sema;        /* Semaphore to sync this thread and its parent */
    struct semaphore parent_load_sema; /* Semaphore to sync this thread and its parent */
    bool is_load_successful;           /* Set to true if load succeeded, false otherwise */
    struct list_elem elem;
};

The above child_process struct was created to allow a parent thread to keep
track of all of its children and implement allowing a parent thread to wait for
its children to complete execution. The comments in the struct provide an
explanation for each member.


struct file_descriptor {
    int fd;                 /* Integer file descriptor for this file. */
    char *file_name;        /* Name of this file. Used to check if already open. */
    struct file *file;      /* Pointer to the file struct for this file. */
    struct list_elem elem;  /* Linked list element. */
};

The above struct is used by a thread to keep track of its open files. It is
used to get a file descriptor for a file or get a file struct from a file
descriptor. It is also used to check if a file has already been opened by a
thread by comparing the name.

The following members were added to the thread struct:

/*! Used for implementing waiting for userprog assignment. */
/**@{*/
struct list children;     /*!< List of immediate children of this thread. */
struct thread *parent;     /*!< Pointer to the parent thread. */
/**@}*/

/*! Used for implementing the file system for the userprog assignment. */
/**@{*/
struct list files;      /*!< List of file descriptors for this thread. */
int fd;                 /*!< The next opened file will have   */
/**@}*/

The list of children was added to allow a thread to keep track of its children
and know the exit status of its child threads. We added a pointer to the parent
for our get_child_process function which takes a tid and then loops over the
children of the thread passed in.
We also added a list of open files to the thread struct and a counter for the
next file descriptor.



---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

                             SYSTEM CALLS
                             ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

			  SURVEY QUESTIONS
			  ================

Answering these questions is optional, but it will help us improve the
course in future years.  Feel free to tell us anything you want - these
questions are just to spur your thoughts.  Also, feel free to be completely
honest if there are issues with the assignment or the course - you won't be
penalized.  We can't fix things until we know about them.  :-)

>> In your opinion, was this assignment, or any of the parts of it, too
>> easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Were there any parts of the assignment that you felt were unnecessarily
>> tedious or pointless?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the instructor and/or TAs to more
>> effectively assist students, either for future quarters or the remaining
>> projects?

>> Any other comments?
